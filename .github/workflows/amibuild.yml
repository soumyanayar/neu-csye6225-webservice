name: Web Service Continuous Integration

env:
  ARTIFACT_NAME: webservice
  CODEDEPLOY_APPLICATION_NAME: csye6225-webapp
  CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP: csye6225-webapp-deployment
  AWS_REGION: us-west-2

on:
  push:
    branches: [main, Assignment-07]
jobs:
  nodejs_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    name: Install node application and run unit tests
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2
      
      - name: Step 2 - Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Step 3 - Run Npm build install and unit tests
        run: |
          npm ci
          npm run build --if-present
          npm test
  
  aws_code_deploy:
    needs: nodejs_tests
    runs-on: ubuntu-latest
    name: Deploy to AWS CodeDeploy
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2
      
      - name: Step 2 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 3 - Zip the artifacts
        run: |
          mkdir codedeploy_artifacts
          ls -al
          zip -r ${{ env.ARTIFACT_NAME }}.zip .
          ls -al
          mv ${{ env.ARTIFACT_NAME }}.zip codedeploy_artifacts
          cd codedeploy_artifacts
          ls -al
          cd ..
          ls -al
      
      - name: Step 4 - Copy the artifacts to S3
        run: |
          aws s3 sync ./codedeploy_artifacts s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}
      
      - name: Step 5 - Call AWS Code Deploy API
        run: |
            output=$(aws deploy create-deployment \
              --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
              --deployment-config-name CodeDeployDefault.AllAtOnce \
              --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP }} \
              --description "CSYE6225 - CodeDeploy" \
              --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{env.ARTIFACT_NAME}}.zip,bundleType=zip \
              --region ${{ env.AWS_REGION }} \
              --output json)
            
            echo $output
            dId=$(echo $output | jq -r '.deploymentId')
            aws deploy wait deployment-successful --deployment-id $dId

  packer_init_validate_build:
    needs: nodejs_tests
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps: 
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the webService files
        run: |
          zip -r webservice.zip ./
          pwd ./webservice
      
      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 4 - Packer Init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: aws-ami.pkr.hcl

      - name: Step 5 - Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: aws-ami.pkr.hcl

      - name: Step 6 - Build Artifacts and create Custom AMI from Packer Build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: aws-ami.pkr.hcl
        env:
          PACKER_LOG: 1
  





